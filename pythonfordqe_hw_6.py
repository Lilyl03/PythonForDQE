# -*- coding: utf-8 -*-
"""PythonForDQE_hw_6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i-wQMAQ6pT5goMqWRVMviM-1r3jXxoH1
"""

import os
from datetime import datetime

class Record:
    def __init__(self, text):
        self.text = self.normalize_text(text)
        self._timestamp = datetime.now()

    def __str__(self):
        return f"{self.text}\nPublished on: {self._timestamp.strftime('%Y-%m-%d %H:%M:%S')}"

    def publish(self, file_path):
        with open(file_path, 'a') as f:
            f.write(str(self) + '\n\n')

    @staticmethod
    def normalize_text(text):
        # Capitalize first letter of each sentence, rest lowercase
        sentences = text.strip().split('. ')
        return '. '.join(s.capitalize() for s in sentences)

class News(Record):
    def __init__(self, text, city):
        super().__init__(text)
        self.city = city

    def __str__(self):
        return f"News -------------------------\n{self.text}\n{self.city}, {self._timestamp.strftime('%Y-%m-%d %H:%M:%S')}"

class PrivateAd(Record):
    def __init__(self, text, expiration_date):
        super().__init__(text)
        self.expiration_date = datetime.strptime(expiration_date, '%Y-%m-%d')

    def __str__(self):
        days_left = (self.expiration_date - self._timestamp).days
        return f"Private Ad -------------------\n{self.text}\nExpires on: {self.expiration_date.strftime('%Y-%m-%d')}, {days_left} days left"

class EventAnnouncement(Record):
    def __init__(self, text, event_date, location):
        super().__init__(text)
        self.event_date = datetime.strptime(event_date, '%Y-%m-%d')
        self.location = location

    def __str__(self):
        days_until = (self.event_date - self._timestamp).days
        return f"Event Announcement -----------\n{self.text}\nLocation: {self.location}\nEvent Date: {self.event_date.strftime('%Y-%m-%d')} ({days_until} days to go)"

class FileRecordImporter:
    def __init__(self, file_path='input.txt', output_path='output.txt'):
        self.file_path = file_path
        self.output_path = output_path

    def process_file(self):
        if not os.path.exists(self.file_path):
            print(f"File {self.file_path} not found.")
            return

        with open(self.file_path, 'r') as f:
            lines = [line.strip() for line in f if line.strip()]

        i = 0
        while i < len(lines):
            record_type = lines[i]
            if record_type == 'News':
                text = lines[i + 1]
                city = lines[i + 2]
                News(text, city).publish(self.output_path)
                i += 3
            elif record_type == 'PrivateAd':
                text = lines[i + 1]
                expiration_date = lines[i + 2]
                PrivateAd(text, expiration_date).publish(self.output_path)
                i += 3
            elif record_type == 'EventAnnouncement':
                text = lines[i + 1]
                event_date = lines[i + 2]
                location = lines[i + 3]
                EventAnnouncement(text, event_date, location).publish(self.output_path)
                i += 4
            else:
                print(f"Unknown record type: {record_type}")
                i += 1

        os.remove(self.file_path)
        print(f"Processed and removed file: {self.file_path}")


importer = FileRecordImporter()
importer.process_file()