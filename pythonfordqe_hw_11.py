# -*- coding: utf-8 -*-
"""PythonForDQE_hw_11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i-wQMAQ6pT5goMqWRVMviM-1r3jXxoH1
"""

import sqlite3
import math

DB_NAME = "cities.db"
EARTH_RADIUS_KM = 6371.0

def init_db():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS cities (
                        name TEXT PRIMARY KEY,
                        latitude REAL,
                        longitude REAL)''')
    conn.commit()
    conn.close()

def get_coordinates(city):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("SELECT latitude, longitude FROM cities WHERE name = ?", (city,))
    result = cursor.fetchone()
    conn.close()

    if result:
        return result
    else:
        # Ask user and store data
        lat = float(input(f"Enter latitude for {city}: "))
        lon = float(input(f"Enter longitude for {city}: "))
        store_coordinates(city, lat, lon)
        return (lat, lon)

def store_coordinates(city, latitude, longitude):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO cities VALUES (?, ?, ?)", (city, latitude, longitude))
    conn.commit()
    conn.close()

def haversine(coord1, coord2):
    lat1, lon1 = map(math.radians, coord1)
    lat2, lon2 = map(math.radians, coord2)

    dlat = lat2 - lat1
    dlon = lon2 - lon1

    a = math.sin(dlat/2)**2 + math.cos(lat1)*math.cos(lat2)*math.sin(dlon/2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

    return EARTH_RADIUS_KM * c

def main():
    init_db()
    city1 = input("Enter first city name: ").strip()
    city2 = input("Enter second city name: ").strip()

    coord1 = get_coordinates(city1)
    coord2 = get_coordinates(city2)

    distance = haversine(coord1, coord2)
    print(f"Straight-line distance between {city1} and {city2} is {distance:.2f} km")

if __name__ == "__main__":
    main()