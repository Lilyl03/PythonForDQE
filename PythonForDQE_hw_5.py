# -*- coding: utf-8 -*-
"""cls_hw.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i-wQMAQ6pT5goMqWRVMviM-1r3jXxoH1
"""

from datetime import datetime

class Record:
    def __init__(self, text):
        self.text = text
        self._timestamp = datetime.now()

    def __str__(self):
        return f"{self.text}\nPublished on: {self._timestamp.strftime('%Y-%m-%d %H:%M:%S')}"

    def publish(self, file_path):
        with open(file_path, 'a') as f:
            f.write(str(self) + '\n\n')

class News(Record):
    def __init__(self, text, city):
        super().__init__(text)
        self.city = city

    def __str__(self):
        return f"News -------------------------\n{self.text}\n{self.city}, {self._timestamp.strftime('%Y-%m-%d %H:%M:%S')}"

class PrivateAd(Record):
    def __init__(self, text, expiration_date):
        super().__init__(text)
        self.expiration_date = datetime.strptime(expiration_date, '%Y-%m-%d')

    def __str__(self):
        days_left = (self.expiration_date - self._timestamp).days
        return f"Private Ad -------------------\n{self.text}\nExpires on: {self.expiration_date.strftime('%Y-%m-%d')}, {days_left} days left"

class EventAnnouncement(Record):
    def __init__(self, text, event_date, location):
        super().__init__(text)
        self.event_date = datetime.strptime(event_date, '%Y-%m-%d')
        self.location = location

    def __str__(self):
        days_until = (self.event_date - self._timestamp).days
        return f"Event Announcement -----------\n{self.text}\nLocation: {self.location}\nEvent Date: {self.event_date.strftime('%Y-%m-%d')} ({days_until} days to go)"